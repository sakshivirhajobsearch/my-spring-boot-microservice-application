
pipeline {
    agent any

    environment {
        DOCKER_NETWORK = 'microservices-net'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Code') {
            steps {
                	git branch: 'main', url: 'https://github.com/sakshivirhajobsearch/my-spring-boot-microservice-application.git'
                script {
                    echo 'Assuming code is already present via Jenkins Git SCM checkout.'
                }
            }
        }

        stage('Build All Modules') {
            steps {
                script {
                    def services = ['service-registry', 'api-gateway', 'microservice-one', 'microservice-two']
                    services.each { service ->
                        dir(service) {
                            bat 'mvn clean package -DskipTests'
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = ['service-registry', 'api-gateway', 'microservice-one', 'microservice-two']
                    services.each { service ->
                        dir(service) {
                            def imageName = "${service}:latest"
                            bat "docker build -t ${imageName} ."
                        }
                    }
                }
            }
        }

        stage('Create Docker Network') {
            steps {
                script {
                    bat 'docker network inspect microservices-net || docker network create microservices-net'
                }
            }
        }

        stage('Start All Services with Docker Compose') {
            steps {
                bat 'docker-compose down || true'  // Stop any previous run (ignore errors if none exists)
                bat 'docker-compose up --build -d'
            }
        }

        stage('Post-Deployment Verification') {
            steps {
                bat 'docker ps'
            }
        }
    }

    post {
        success {
            echo 'All services deployed successfully.'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
